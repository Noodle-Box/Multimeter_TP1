
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000426  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001045  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000952  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000948  00000000  00000000  00001f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004de  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b6  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  8e:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	2a 9a       	sbi	0x05, 2	; 5
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x4>
  9a:	2a 98       	cbi	0x05, 2	; 5
  9c:	08 95       	ret

0000009e <lcd_write>:
  9e:	cf 93       	push	r28
  a0:	c8 2f       	mov	r28, r24
  a2:	66 23       	and	r22, r22
  a4:	11 f0       	breq	.+4      	; 0xaa <lcd_write+0xc>
  a6:	28 9a       	sbi	0x05, 0	; 5
  a8:	01 c0       	rjmp	.+2      	; 0xac <lcd_write+0xe>
  aa:	28 98       	cbi	0x05, 0	; 5
  ac:	29 98       	cbi	0x05, 1	; 5
  ae:	24 9a       	sbi	0x04, 4	; 4
  b0:	25 9a       	sbi	0x04, 5	; 4
  b2:	26 9a       	sbi	0x04, 6	; 4
  b4:	27 9a       	sbi	0x04, 7	; 4
  b6:	2f 98       	cbi	0x05, 7	; 5
  b8:	2e 98       	cbi	0x05, 6	; 5
  ba:	2d 98       	cbi	0x05, 5	; 5
  bc:	2c 98       	cbi	0x05, 4	; 5
  be:	cc 23       	and	r28, r28
  c0:	0c f4       	brge	.+2      	; 0xc4 <lcd_write+0x26>
  c2:	2f 9a       	sbi	0x05, 7	; 5
  c4:	c6 fd       	sbrc	r28, 6
  c6:	2e 9a       	sbi	0x05, 6	; 5
  c8:	c5 fd       	sbrc	r28, 5
  ca:	2d 9a       	sbi	0x05, 5	; 5
  cc:	c4 fd       	sbrc	r28, 4
  ce:	2c 9a       	sbi	0x05, 4	; 5
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d4:	2f 98       	cbi	0x05, 7	; 5
  d6:	2e 98       	cbi	0x05, 6	; 5
  d8:	2d 98       	cbi	0x05, 5	; 5
  da:	2c 98       	cbi	0x05, 4	; 5
  dc:	c3 fd       	sbrc	r28, 3
  de:	2f 9a       	sbi	0x05, 7	; 5
  e0:	c2 fd       	sbrc	r28, 2
  e2:	2e 9a       	sbi	0x05, 6	; 5
  e4:	c1 fd       	sbrc	r28, 1
  e6:	2d 9a       	sbi	0x05, 5	; 5
  e8:	c0 fd       	sbrc	r28, 0
  ea:	2c 9a       	sbi	0x05, 4	; 5
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  f0:	2c 9a       	sbi	0x05, 4	; 5
  f2:	2d 9a       	sbi	0x05, 5	; 5
  f4:	2e 9a       	sbi	0x05, 6	; 5
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_read>:
  fc:	88 23       	and	r24, r24
  fe:	11 f0       	breq	.+4      	; 0x104 <lcd_read+0x8>
 100:	28 9a       	sbi	0x05, 0	; 5
 102:	01 c0       	rjmp	.+2      	; 0x106 <lcd_read+0xa>
 104:	28 98       	cbi	0x05, 0	; 5
 106:	29 9a       	sbi	0x05, 1	; 5
 108:	24 98       	cbi	0x04, 4	; 4
 10a:	25 98       	cbi	0x04, 5	; 4
 10c:	26 98       	cbi	0x04, 6	; 4
 10e:	27 98       	cbi	0x04, 7	; 4
 110:	2a 9a       	sbi	0x05, 2	; 5
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_read+0x18>
 114:	1c 9b       	sbis	0x03, 4	; 3
 116:	02 c0       	rjmp	.+4      	; 0x11c <lcd_read+0x20>
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_read+0x22>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	1d 99       	sbic	0x03, 5	; 3
 120:	80 62       	ori	r24, 0x20	; 32
 122:	1e 99       	sbic	0x03, 6	; 3
 124:	80 64       	ori	r24, 0x40	; 64
 126:	1f 99       	sbic	0x03, 7	; 3
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	2a 98       	cbi	0x05, 2	; 5
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x32>
 12e:	2a 9a       	sbi	0x05, 2	; 5
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_read+0x36>
 132:	1c 99       	sbic	0x03, 4	; 3
 134:	81 60       	ori	r24, 0x01	; 1
 136:	1d 99       	sbic	0x03, 5	; 3
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	1e 99       	sbic	0x03, 6	; 3
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	1f 99       	sbic	0x03, 7	; 3
 140:	88 60       	ori	r24, 0x08	; 8
 142:	2a 98       	cbi	0x05, 2	; 5
 144:	08 95       	ret

00000146 <lcd_waitbusy>:
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_read>
 14c:	88 23       	and	r24, r24
 14e:	dc f3       	brlt	.-10     	; 0x146 <lcd_waitbusy>
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_waitbusy+0xe>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_read>
 15e:	08 95       	ret

00000160 <lcd_command>:
 160:	cf 93       	push	r28
 162:	c8 2f       	mov	r28, r24
 164:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_waitbusy>
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_gotoxy>:
 174:	61 11       	cpse	r22, r1
 176:	04 c0       	rjmp	.+8      	; 0x180 <lcd_gotoxy+0xc>
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 17e:	08 95       	ret
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	21 f4       	brne	.+8      	; 0x18c <lcd_gotoxy+0x18>
 184:	80 54       	subi	r24, 0x40	; 64
 186:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 18a:	08 95       	ret
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	21 f4       	brne	.+8      	; 0x198 <lcd_gotoxy+0x24>
 190:	8c 56       	subi	r24, 0x6C	; 108
 192:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 196:	08 95       	ret
 198:	8c 52       	subi	r24, 0x2C	; 44
 19a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 19e:	08 95       	ret

000001a0 <lcd_clrscr>:
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 1a6:	08 95       	ret

000001a8 <lcd_putc>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_waitbusy>
 1b0:	ca 30       	cpi	r28, 0x0A	; 10
 1b2:	a1 f4       	brne	.+40     	; 0x1dc <lcd_putc+0x34>
 1b4:	84 31       	cpi	r24, 0x14	; 20
 1b6:	48 f0       	brcs	.+18     	; 0x1ca <lcd_putc+0x22>
 1b8:	90 ec       	ldi	r25, 0xC0	; 192
 1ba:	98 0f       	add	r25, r24
 1bc:	94 31       	cpi	r25, 0x14	; 20
 1be:	38 f0       	brcs	.+14     	; 0x1ce <lcd_putc+0x26>
 1c0:	84 51       	subi	r24, 0x14	; 20
 1c2:	8c 32       	cpi	r24, 0x2C	; 44
 1c4:	30 f0       	brcs	.+12     	; 0x1d2 <lcd_putc+0x2a>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <lcd_putc+0x2c>
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_putc+0x2c>
 1ce:	84 e1       	ldi	r24, 0x14	; 20
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <lcd_putc+0x2c>
 1d2:	84 e5       	ldi	r24, 0x54	; 84
 1d4:	80 58       	subi	r24, 0x80	; 128
 1d6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <lcd_putc+0x3c>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_write>
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_puts>:
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	29 f0       	breq	.+10     	; 0x202 <lcd_puts+0x1a>
 1f8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fb cf       	rjmp	.-10     	; 0x1f8 <lcd_puts+0x10>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 210:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 212:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 214:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 216:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 218:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 21a:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 21c:	27 9a       	sbi	0x04, 7	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	9a ef       	ldi	r25, 0xFA	; 250
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 226:	2d 9a       	sbi	0x05, 5	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 228:	2c 9a       	sbi	0x05, 4	; 5
    lcd_e_toggle();
 22a:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 236:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	ce 01       	movw	r24, r28
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 244:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 248:	ce 01       	movw	r24, r28
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 24e:	2c 98       	cbi	0x05, 4	; 5
    lcd_e_toggle();
 250:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 258:	88 e2       	ldi	r24, 0x28	; 40
 25a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 264:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>

}/* lcd_init */
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <change_brightness>:
#include "LCD_LIB/lcd.h"
#include <stdint.h>
#define F_CPU 16000000UL	// 16MHz


	void change_brightness (int level) {
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
		
		if (level <= 4){
 288:	85 30       	cpi	r24, 0x05	; 5
 28a:	91 05       	cpc	r25, r1
 28c:	04 f5       	brge	.+64     	; 0x2ce <change_brightness+0x52>
 28e:	7c 01       	movw	r14, r24
 290:	c3 e0       	ldi	r28, 0x03	; 3
			/* clear the bar */
			for (int i = 3; i >= 0; i--){
				lcd_gotoxy(19,i);
 292:	6c 2f       	mov	r22, r28
 294:	83 e1       	ldi	r24, 0x13	; 19
 296:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_puts(" ");
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_puts>
 2a2:	c1 50       	subi	r28, 0x01	; 1
 2a4:	b0 f7       	brcc	.-20     	; 0x292 <change_brightness+0x16>
			}
			
			/* fill it up to the level desired */
			for (int i=4; i >= 4-level; i--) {
 2a6:	04 e0       	ldi	r16, 0x04	; 4
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0e 19       	sub	r16, r14
 2ac:	1f 09       	sbc	r17, r15
 2ae:	05 30       	cpi	r16, 0x05	; 5
 2b0:	11 05       	cpc	r17, r1
 2b2:	6c f4       	brge	.+26     	; 0x2ce <change_brightness+0x52>
 2b4:	c4 e0       	ldi	r28, 0x04	; 4
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
				lcd_gotoxy(19,i);
 2b8:	6c 2f       	mov	r22, r28
 2ba:	83 e1       	ldi	r24, 0x13	; 19
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_putc(255);
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
				lcd_gotoxy(19,i);
				lcd_puts(" ");
			}
			
			/* fill it up to the level desired */
			for (int i=4; i >= 4-level; i--) {
 2c6:	21 97       	sbiw	r28, 0x01	; 1
 2c8:	c0 17       	cp	r28, r16
 2ca:	d1 07       	cpc	r29, r17
 2cc:	ac f7       	brge	.-22     	; 0x2b8 <change_brightness+0x3c>
				lcd_gotoxy(19,i);
				lcd_putc(255);
			}
		}
	}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	08 95       	ret

000002dc <change_mode>:

	void change_mode(int mode){
			if(mode == 1){
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	91 05       	cpc	r25, r1
 2e0:	59 f4       	brne	.+22     	; 0x2f8 <change_mode+0x1c>
				lcd_clrscr();
 2e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
				lcd_gotoxy(0,0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_puts("Mode: V(DC)");
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_puts>
 2f6:	08 95       	ret
			}
			else if (mode == 2){
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	59 f4       	brne	.+22     	; 0x314 <change_mode+0x38>
				lcd_clrscr();
 2fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
				lcd_gotoxy(0,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_puts("MODE:V(AC)");
 30a:	8e e0       	ldi	r24, 0x0E	; 14
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_puts>
 312:	08 95       	ret
			}
			else if (mode == 3){
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	91 05       	cpc	r25, r1
 318:	59 f4       	brne	.+22     	; 0x330 <change_mode+0x54>
				lcd_clrscr();
 31a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
				lcd_gotoxy(0,0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_puts("MODE:Resistance");
 326:	89 e1       	ldi	r24, 0x19	; 25
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_puts>
 32e:	08 95       	ret
			} 
			else if (mode == 4){
 330:	04 97       	sbiw	r24, 0x04	; 4
 332:	51 f4       	brne	.+20     	; 0x348 <change_mode+0x6c>
				lcd_clrscr();
 334:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
				lcd_gotoxy(0,0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_gotoxy>
				lcd_puts("MODE:Continuity");
 340:	89 e2       	ldi	r24, 0x29	; 41
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_puts>
 348:	08 95       	ret

0000034a <main>:
			}
	}

int main(void)
{	
	lcd_init(LCD_DISP_ON_CURSOR);
 34a:	8e e0       	ldi	r24, 0x0E	; 14
 34c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_init>
	/* set bits 6 as outputs*/
	DDRD = (1<<PORTD6);
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	8a b9       	out	0x0a, r24	; 10
	
	/* set port B as output*/
	 DDRC &= 0xF9;
 354:	87 b1       	in	r24, 0x07	; 7
 356:	89 7f       	andi	r24, 0xF9	; 249
 358:	87 b9       	out	0x07, r24	; 7
	
	/* relevant bitshift to activate pullup resistor*/
	PORTC = (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2); 
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	88 b9       	out	0x08, r24	; 8
	



	/*clear the LCD screen*/
	lcd_clrscr();
 35e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
	/*create the bar and relevant messages*/    
	 int current_level = 4;
	 int current_mode = 1;
	
	/* set output compare values*/
	OCR0A = 0;
 362:	17 bc       	out	0x27, r1	; 39
	change_mode(current_mode);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 6e 01 	call	0x2dc	; 0x2dc <change_mode>
	change_brightness(current_level);
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 3e 01 	call	0x27c	; 0x27c <change_brightness>
	
	/* set up timer/counter 0 for past PWM, set on compare match */
	TCCR0A = (1<<COM0A0)|(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 374:	83 ec       	ldi	r24, 0xC3	; 195
 376:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	85 bd       	out	0x25, r24	; 37
	/*clear the LCD screen*/
	lcd_clrscr();

	/*create the bar and relevant messages*/    
	 int current_level = 4;
	 int current_mode = 1;
 37c:	01 e0       	ldi	r16, 0x01	; 1
 37e:	10 e0       	ldi	r17, 0x00	; 0

	/*clear the LCD screen*/
	lcd_clrscr();

	/*create the bar and relevant messages*/    
	 int current_level = 4;
 380:	c4 e0       	ldi	r28, 0x04	; 4
 382:	d0 e0       	ldi	r29, 0x00	; 0
		/* if the pin is low decrease the brightness */
		if((PINC & (1 << PINC0)) == 0){
			_delay_ms(250);
			if (current_level - 1 <= 0 && OCR0A + 63 > 251){
				current_level = 0;
				OCR0A = 255;
 384:	ff 24       	eor	r15, r15
 386:	fa 94       	dec	r15
	
    /* Replace with your application code */
    while (1) 
    {
		/* if the pin is low decrease the brightness */
		if((PINC & (1 << PINC0)) == 0){
 388:	30 99       	sbic	0x06, 0	; 6
 38a:	1a c0       	rjmp	.+52     	; 0x3c0 <main+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	83 e2       	ldi	r24, 0x23	; 35
 38e:	94 ef       	ldi	r25, 0xF4	; 244
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x46>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x4c>
 396:	00 00       	nop
			_delay_ms(250);
			if (current_level - 1 <= 0 && OCR0A + 63 > 251){
 398:	21 97       	sbiw	r28, 0x01	; 1
 39a:	1c 16       	cp	r1, r28
 39c:	1d 06       	cpc	r1, r29
 39e:	54 f0       	brlt	.+20     	; 0x3b4 <main+0x6a>
 3a0:	87 b5       	in	r24, 0x27	; 39
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	cf 96       	adiw	r24, 0x3f	; 63
 3a6:	8c 3f       	cpi	r24, 0xFC	; 252
 3a8:	91 05       	cpc	r25, r1
 3aa:	24 f0       	brlt	.+8      	; 0x3b4 <main+0x6a>
				current_level = 0;
				OCR0A = 255;
 3ac:	f7 bc       	out	0x27, r15	; 39
    {
		/* if the pin is low decrease the brightness */
		if((PINC & (1 << PINC0)) == 0){
			_delay_ms(250);
			if (current_level - 1 <= 0 && OCR0A + 63 > 251){
				current_level = 0;
 3ae:	c0 e0       	ldi	r28, 0x00	; 0
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
				OCR0A = 255;
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <main+0x70>
			} else {
				current_level --;
				OCR0A = OCR0A + 63;
 3b4:	87 b5       	in	r24, 0x27	; 39
 3b6:	81 5c       	subi	r24, 0xC1	; 193
 3b8:	87 bd       	out	0x27, r24	; 39
			}
			change_brightness(current_level);
 3ba:	ce 01       	movw	r24, r28
 3bc:	0e 94 3e 01 	call	0x27c	; 0x27c <change_brightness>
		}
			
			
		/* if the pin is high increase the brightness */
		if((PINC & (1 << PINC1)) == 0){
 3c0:	31 99       	sbic	0x06, 1	; 6
 3c2:	19 c0       	rjmp	.+50     	; 0x3f6 <main+0xac>
 3c4:	83 e2       	ldi	r24, 0x23	; 35
 3c6:	94 ef       	ldi	r25, 0xF4	; 244
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x7e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x84>
 3ce:	00 00       	nop
			_delay_ms(250);
			if(current_level + 1 >= 4 && OCR0A - 63 <= 3){
 3d0:	21 96       	adiw	r28, 0x01	; 1
 3d2:	c4 30       	cpi	r28, 0x04	; 4
 3d4:	d1 05       	cpc	r29, r1
 3d6:	4c f0       	brlt	.+18     	; 0x3ea <main+0xa0>
 3d8:	87 b5       	in	r24, 0x27	; 39
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	cf 97       	sbiw	r24, 0x3f	; 63
 3de:	04 97       	sbiw	r24, 0x04	; 4
 3e0:	24 f4       	brge	.+8      	; 0x3ea <main+0xa0>
				current_level = 4;
				OCR0A = 0;
 3e2:	17 bc       	out	0x27, r1	; 39
			
		/* if the pin is high increase the brightness */
		if((PINC & (1 << PINC1)) == 0){
			_delay_ms(250);
			if(current_level + 1 >= 4 && OCR0A - 63 <= 3){
				current_level = 4;
 3e4:	c4 e0       	ldi	r28, 0x04	; 4
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
				OCR0A = 0;
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <main+0xa6>
			} else {
				current_level ++;
				OCR0A = OCR0A - 63;
 3ea:	87 b5       	in	r24, 0x27	; 39
 3ec:	8f 53       	subi	r24, 0x3F	; 63
 3ee:	87 bd       	out	0x27, r24	; 39
			}
			change_brightness(current_level);
 3f0:	ce 01       	movw	r24, r28
 3f2:	0e 94 3e 01 	call	0x27c	; 0x27c <change_brightness>
		}
		
		/* if pin changes change mode*/
		if((PINC & (1<<PINC2)) == 0){
 3f6:	32 99       	sbic	0x06, 2	; 6
 3f8:	c7 cf       	rjmp	.-114    	; 0x388 <main+0x3e>
 3fa:	83 e2       	ldi	r24, 0x23	; 35
 3fc:	94 ef       	ldi	r25, 0xF4	; 244
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0xb4>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
			_delay_ms(250);
			if(current_mode + 1 <= 4){
 406:	0f 5f       	subi	r16, 0xFF	; 255
 408:	1f 4f       	sbci	r17, 0xFF	; 255
 40a:	05 30       	cpi	r16, 0x05	; 5
 40c:	11 05       	cpc	r17, r1
 40e:	14 f0       	brlt	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				current_mode++;
			} else {
				current_mode = 1;
 410:	01 e0       	ldi	r16, 0x01	; 1
 412:	10 e0       	ldi	r17, 0x00	; 0
			}
			change_mode(current_mode);
 414:	c8 01       	movw	r24, r16
 416:	0e 94 6e 01 	call	0x2dc	; 0x2dc <change_mode>
			change_brightness(current_level);
 41a:	ce 01       	movw	r24, r28
 41c:	0e 94 3e 01 	call	0x27c	; 0x27c <change_brightness>
 420:	b3 cf       	rjmp	.-154    	; 0x388 <main+0x3e>

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
