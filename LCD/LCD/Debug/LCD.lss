
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000582  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080013c  0080013c  00000652  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001729  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  00001f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ddd  00000000  00000000  00002a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df2  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  9e:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	2a 9a       	sbi	0x05, 2	; 5
  a8:	00 c0       	rjmp	.+0      	; 0xaa <toggle_e+0x4>
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	24 9a       	sbi	0x04, 4	; 4
  c0:	25 9a       	sbi	0x04, 5	; 4
  c2:	26 9a       	sbi	0x04, 6	; 4
  c4:	27 9a       	sbi	0x04, 7	; 4
  c6:	2f 98       	cbi	0x05, 7	; 5
  c8:	2e 98       	cbi	0x05, 6	; 5
  ca:	2d 98       	cbi	0x05, 5	; 5
  cc:	2c 98       	cbi	0x05, 4	; 5
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	2f 9a       	sbi	0x05, 7	; 5
  d4:	c6 fd       	sbrc	r28, 6
  d6:	2e 9a       	sbi	0x05, 6	; 5
  d8:	c5 fd       	sbrc	r28, 5
  da:	2d 9a       	sbi	0x05, 5	; 5
  dc:	c4 fd       	sbrc	r28, 4
  de:	2c 9a       	sbi	0x05, 4	; 5
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	2f 98       	cbi	0x05, 7	; 5
  e6:	2e 98       	cbi	0x05, 6	; 5
  e8:	2d 98       	cbi	0x05, 5	; 5
  ea:	2c 98       	cbi	0x05, 4	; 5
  ec:	c3 fd       	sbrc	r28, 3
  ee:	2f 9a       	sbi	0x05, 7	; 5
  f0:	c2 fd       	sbrc	r28, 2
  f2:	2e 9a       	sbi	0x05, 6	; 5
  f4:	c1 fd       	sbrc	r28, 1
  f6:	2d 9a       	sbi	0x05, 5	; 5
  f8:	c0 fd       	sbrc	r28, 0
  fa:	2c 9a       	sbi	0x05, 4	; 5
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	2c 9a       	sbi	0x05, 4	; 5
 102:	2d 9a       	sbi	0x05, 5	; 5
 104:	2e 9a       	sbi	0x05, 6	; 5
 106:	2f 9a       	sbi	0x05, 7	; 5
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	28 9a       	sbi	0x05, 0	; 5
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	28 98       	cbi	0x05, 0	; 5
 116:	29 9a       	sbi	0x05, 1	; 5
 118:	24 98       	cbi	0x04, 4	; 4
 11a:	25 98       	cbi	0x04, 5	; 4
 11c:	26 98       	cbi	0x04, 6	; 4
 11e:	27 98       	cbi	0x04, 7	; 4
 120:	2a 9a       	sbi	0x05, 2	; 5
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x18>
 124:	1c 9b       	sbis	0x03, 4	; 3
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	1d 99       	sbic	0x03, 5	; 3
 130:	80 62       	ori	r24, 0x20	; 32
 132:	1e 99       	sbic	0x03, 6	; 3
 134:	80 64       	ori	r24, 0x40	; 64
 136:	1f 99       	sbic	0x03, 7	; 3
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	2a 98       	cbi	0x05, 2	; 5
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_read+0x32>
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_read+0x36>
 142:	1c 99       	sbic	0x03, 4	; 3
 144:	81 60       	ori	r24, 0x01	; 1
 146:	1d 99       	sbic	0x03, 5	; 3
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	1e 99       	sbic	0x03, 6	; 3
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	1f 99       	sbic	0x03, 7	; 3
 150:	88 60       	ori	r24, 0x08	; 8
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_waitbusy+0xe>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16e:	08 95       	ret

00000170 <lcd_command>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_gotoxy>:
 184:	61 11       	cpse	r22, r1
 186:	04 c0       	rjmp	.+8      	; 0x190 <lcd_gotoxy+0xc>
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 18e:	08 95       	ret
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	21 f4       	brne	.+8      	; 0x19c <lcd_gotoxy+0x18>
 194:	80 54       	subi	r24, 0x40	; 64
 196:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 19a:	08 95       	ret
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	21 f4       	brne	.+8      	; 0x1a8 <lcd_gotoxy+0x24>
 1a0:	8c 56       	subi	r24, 0x6C	; 108
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 1a6:	08 95       	ret
 1a8:	8c 52       	subi	r24, 0x2C	; 44
 1aa:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 1ae:	08 95       	ret

000001b0 <lcd_clrscr>:
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 1b6:	08 95       	ret

000001b8 <lcd_putc>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1c0:	ca 30       	cpi	r28, 0x0A	; 10
 1c2:	a1 f4       	brne	.+40     	; 0x1ec <lcd_putc+0x34>
 1c4:	84 31       	cpi	r24, 0x14	; 20
 1c6:	48 f0       	brcs	.+18     	; 0x1da <lcd_putc+0x22>
 1c8:	90 ec       	ldi	r25, 0xC0	; 192
 1ca:	98 0f       	add	r25, r24
 1cc:	94 31       	cpi	r25, 0x14	; 20
 1ce:	38 f0       	brcs	.+14     	; 0x1de <lcd_putc+0x26>
 1d0:	84 51       	subi	r24, 0x14	; 20
 1d2:	8c 32       	cpi	r24, 0x2C	; 44
 1d4:	30 f0       	brcs	.+12     	; 0x1e2 <lcd_putc+0x2a>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <lcd_putc+0x2c>
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <lcd_putc+0x2c>
 1de:	84 e1       	ldi	r24, 0x14	; 20
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <lcd_putc+0x2c>
 1e2:	84 e5       	ldi	r24, 0x54	; 84
 1e4:	80 58       	subi	r24, 0x80	; 128
 1e6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <lcd_putc+0x3c>
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcd_puts>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x1a>
 208:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_putc>
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <lcd_puts+0x10>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 220:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 222:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 224:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 226:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 228:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 22a:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 22c:	27 9a       	sbi	0x04, 7	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	9a ef       	ldi	r25, 0xFA	; 250
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 236:	2d 9a       	sbi	0x05, 5	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 238:	2c 9a       	sbi	0x05, 4	; 5
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	9e e4       	ldi	r25, 0x4E	; 78
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d1 e0       	ldi	r29, 0x01	; 1
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 254:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 258:	ce 01       	movw	r24, r28
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 25e:	2c 98       	cbi	0x05, 4	; 5
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_command>

}/* lcd_init */
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 28c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 296:	08 95       	ret

00000298 <change_brightness>:
}


void uart_newline(void) {
	uart_transmit('\n');
	uart_transmit('\r');
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	85 30       	cpi	r24, 0x05	; 5
 2a6:	91 05       	cpc	r25, r1
 2a8:	04 f5       	brge	.+64     	; 0x2ea <change_brightness+0x52>
 2aa:	7c 01       	movw	r14, r24
 2ac:	c3 e0       	ldi	r28, 0x03	; 3
 2ae:	6c 2f       	mov	r22, r28
 2b0:	83 e1       	ldi	r24, 0x13	; 19
 2b2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
 2be:	c1 50       	subi	r28, 0x01	; 1
 2c0:	b0 f7       	brcc	.-20     	; 0x2ae <change_brightness+0x16>
 2c2:	04 e0       	ldi	r16, 0x04	; 4
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	0e 19       	sub	r16, r14
 2c8:	1f 09       	sbc	r17, r15
 2ca:	05 30       	cpi	r16, 0x05	; 5
 2cc:	11 05       	cpc	r17, r1
 2ce:	6c f4       	brge	.+26     	; 0x2ea <change_brightness+0x52>
 2d0:	c4 e0       	ldi	r28, 0x04	; 4
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	6c 2f       	mov	r22, r28
 2d6:	83 e1       	ldi	r24, 0x13	; 19
 2d8:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_putc>
 2e2:	21 97       	sbiw	r28, 0x01	; 1
 2e4:	c0 17       	cp	r28, r16
 2e6:	d1 07       	cpc	r29, r17
 2e8:	ac f7       	brge	.-22     	; 0x2d4 <change_brightness+0x3c>
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <change_mode>:
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	59 f4       	brne	.+22     	; 0x314 <change_mode+0x1c>
 2fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
 312:	08 95       	ret
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	59 f4       	brne	.+22     	; 0x330 <change_mode+0x38>
 31a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
 32e:	08 95       	ret
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	91 05       	cpc	r25, r1
 334:	59 f4       	brne	.+22     	; 0x34c <change_mode+0x54>
 336:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 342:	8b e1       	ldi	r24, 0x1B	; 27
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
 34a:	08 95       	ret
 34c:	04 97       	sbiw	r24, 0x04	; 4
 34e:	51 f4       	brne	.+20     	; 0x364 <change_mode+0x6c>
 350:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
 35c:	8b e2       	ldi	r24, 0x2B	; 43
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
 364:	08 95       	ret

00000366 <__vector_4>:
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
 388:	30 99       	sbic	0x06, 0	; 6
 38a:	29 c0       	rjmp	.+82     	; 0x3de <__vector_4+0x78>
 38c:	83 e2       	ldi	r24, 0x23	; 35
 38e:	94 ef       	ldi	r25, 0xF4	; 244
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <__vector_4+0x2a>
 394:	00 c0       	rjmp	.+0      	; 0x396 <__vector_4+0x30>
 396:	00 00       	nop
 398:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 39c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	18 16       	cp	r1, r24
 3a4:	19 06       	cpc	r1, r25
 3a6:	74 f0       	brlt	.+28     	; 0x3c4 <__vector_4+0x5e>
 3a8:	27 b5       	in	r18, 0x27	; 39
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	21 5c       	subi	r18, 0xC1	; 193
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	2c 3f       	cpi	r18, 0xFC	; 252
 3b2:	31 05       	cpc	r19, r1
 3b4:	3c f0       	brlt	.+14     	; 0x3c4 <__vector_4+0x5e>
 3b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 3ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	87 bd       	out	0x27, r24	; 39
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__vector_4+0x6c>
 3c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3cc:	87 b5       	in	r24, 0x27	; 39
 3ce:	81 5c       	subi	r24, 0xC1	; 193
 3d0:	87 bd       	out	0x27, r24	; 39
 3d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3da:	0e 94 4c 01 	call	0x298	; 0x298 <change_brightness>
 3de:	31 99       	sbic	0x06, 1	; 6
 3e0:	2a c0       	rjmp	.+84     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3e2:	83 e2       	ldi	r24, 0x23	; 35
 3e4:	94 ef       	ldi	r25, 0xF4	; 244
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <__vector_4+0x80>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <__vector_4+0x86>
 3ec:	00 00       	nop
 3ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	91 05       	cpc	r25, r1
 3fc:	7c f0       	brlt	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fe:	27 b5       	in	r18, 0x27	; 39
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	2f 53       	subi	r18, 0x3F	; 63
 404:	31 09       	sbc	r19, r1
 406:	24 30       	cpi	r18, 0x04	; 4
 408:	31 05       	cpc	r19, r1
 40a:	44 f4       	brge	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40c:	84 e0       	ldi	r24, 0x04	; 4
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 418:	17 bc       	out	0x27, r1	; 39
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 420:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 424:	87 b5       	in	r24, 0x27	; 39
 426:	8f 53       	subi	r24, 0x3F	; 63
 428:	87 bd       	out	0x27, r24	; 39
 42a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 42e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 432:	0e 94 4c 01 	call	0x298	; 0x298 <change_brightness>
 436:	32 99       	sbic	0x06, 2	; 6
 438:	25 c0       	rjmp	.+74     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 43a:	83 e2       	ldi	r24, 0x23	; 35
 43c:	94 ef       	ldi	r25, 0xF4	; 244
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
 446:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <current_mode>
 44a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <current_mode+0x1>
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	85 30       	cpi	r24, 0x05	; 5
 452:	91 05       	cpc	r25, r1
 454:	2c f4       	brge	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 456:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <current_mode+0x1>
 45a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <current_mode>
 45e:	06 c0       	rjmp	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <current_mode+0x1>
 468:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <current_mode>
 46c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <current_mode>
 470:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <current_mode+0x1>
 474:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <change_mode>
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 480:	0e 94 4c 01 	call	0x298	; 0x298 <change_brightness>
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <uart_init>:
 4a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4ae:	e1 ec       	ldi	r30, 0xC1	; 193
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	88 e0       	ldi	r24, 0x08	; 8
 4b4:	80 83       	st	Z, r24
 4b6:	80 81       	ld	r24, Z
 4b8:	80 69       	ori	r24, 0x90	; 144
 4ba:	80 83       	st	Z, r24
 4bc:	8e e0       	ldi	r24, 0x0E	; 14
 4be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4c2:	08 95       	ret

000004c4 <main>:
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_init>
 4ca:	80 e4       	ldi	r24, 0x40	; 64
 4cc:	8a b9       	out	0x0a, r24	; 10
 4ce:	87 b1       	in	r24, 0x07	; 7
 4d0:	89 7f       	andi	r24, 0xF9	; 249
 4d2:	87 b9       	out	0x07, r24	; 7
 4d4:	cf e0       	ldi	r28, 0x0F	; 15
 4d6:	c8 b9       	out	0x08, r28	; 8
 4d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_clrscr>
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 4e2:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 4e6:	17 bc       	out	0x27, r1	; 39
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <change_mode>
 4f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4f8:	0e 94 4c 01 	call	0x298	; 0x298 <change_brightness>
 4fc:	83 ec       	ldi	r24, 0xC3	; 195
 4fe:	84 bd       	out	0x24, r24	; 36
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	85 bd       	out	0x25, r24	; 37
 504:	81 e3       	ldi	r24, 0x31	; 49
 506:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uart_init>
 50a:	0e 94 46 01 	call	0x28c	; 0x28c <i2c_init>
 50e:	78 94       	sei
 510:	ff cf       	rjmp	.-2      	; 0x510 <main+0x4c>

00000512 <uart_transmit>:
 512:	e0 ec       	ldi	r30, 0xC0	; 192
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	90 81       	ld	r25, Z
 518:	95 ff       	sbrs	r25, 5
 51a:	fd cf       	rjmp	.-6      	; 0x516 <uart_transmit+0x4>
 51c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 520:	08 95       	ret

00000522 <uart_receive>:
	/* Put data into buffer, sends the data */
	UDR0 = data;
}
unsigned char uart_receive(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 522:	e0 ec       	ldi	r30, 0xC0	; 192
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	88 23       	and	r24, r24
 52a:	ec f7       	brge	.-6      	; 0x526 <uart_receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
 52c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 530:	08 95       	ret

00000532 <__vector_18>:
ISR(USART_RX_vect) {
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	unsigned char dummy;
	dummy = uart_receive();
 554:	0e 94 91 02 	call	0x522	; 0x522 <uart_receive>
	uart_transmit(dummy);
 558:	0e 94 89 02 	call	0x512	; 0x512 <uart_transmit>
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
